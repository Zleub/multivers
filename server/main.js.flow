/* @flow */

import crypto from 'crypto'
import fs, { writeFileSync } from 'fs'

import R from 'ramda'

import express from 'express'
import { app, ws_app } from './express'

import { seed, twisted_euclidean_distance } from './util'
import { update_user, update_world } from './update'
import { users, user_to_string } from './user'
import { voronoi, delaunay, world, paths, poly } from './location'
import { getWorld, getChunk } from './world'

// import { items, Item } from './item'
// import { width, height, sites, getWorld, getChunk } from './world'
// import { world, update_world, update_world_daily, delaunay, voronoi, poly, paths } from './location'
// import { users, user_to_string, update_user } from './user'
// import { states } from './state'
import { time, scale } from './time'

if (process.argv.find(e => e == '--log' || e == '-l'))
  writeFileSync("multivers.log", "")

let is_user = (req: express$Request, res, next) => {
  if (users.find(e => e.ip == req.ip)) {
    req.headers.user = users.find(e => e.ip == req.headers.ip)
    next()
  } else {
    res.end(400)
  }
}

app.use(is_user)

let debug = (req: express$Request, res, next) => {
  // console.log(`${req.protocol}://${req.hostname}${req.url}: ${req.headers.user ? req.wheaders.user.name : `no user defined for ${req.headers.ip}`}`)
  next()
}

app.use(debug)
app.use('/', express.static('client'))
app.use('/doc', express.static('docs/reference'))

require('./get').default(app)

app.get('/explore', (req: express$Request, res, next) => {
  let {user} = req.headers

  user.state = user.state == 'explore' ? 'idle' : 'explore'
  user.ws.send(JSON.stringify({ cmd: 'me', payload: user_to_string(user) }))
  return res.end()
})

let pretty = e => JSON.stringify(e, (key, val) => val === Infinity ? 'Infinity' : val, 2)

// app.get('/states', (req: express$Request, res, next) => {
//   res.end( JSON.stringify(R.keys(world[req.headers.user.location].states)) )
// })
//
// app.get('/actions', (req: express$Request, res, next) => {
//   res.end( JSON.stringify(R.keys(world[req.headers.user.location].actions)) )
// })

app.get('/shop', (req: express$Request, res, next) => {
  res.end( pretty( Object.values(world[req.headers.user.location].actions.shop).filter(e => e.from.find(e => typeof e == 'number')).map(R.pick(['name', 'from'])) ) )
})

app.get('/location', (req: express$Request, res, next) => {
  let location = req.headers.user.location
  let city = Object.entries(world).find(([k, v]) => v.x == location.x && v.y == location.y)
  res.end( pretty(R.omit(['actions', 'states'], city ? city[1] : "aoiwjd")) )
})

app.get('/map', (req: express$Request, res, next) => {
  let location = req.headers.user.location

  res.end([].concat(
    // `<polygon points="${voronoi.cellPolygon(delaunay.find(location.x, location.y)).map(([x, y]) => ([x - location.x + 100, y - location.y + 100]))}" fill="none" stroke="black"/>`
    // + [...delaunay.neighbors(delaunay.find(location.x, location.y))].map(i => `<polygon points="${voronoi.cellPolygon(i).map(([x, y]) => ([x - location.x + 100, y - location.y + 100]))}" fill="none" stroke="black"/>`)
    poly.map(e => `<polygon points="${e.map(([x, y]) => ([x - location.x + 100, y - location.y + 100]))}" fill="none" stroke="black"/>`)
    // `<path d=${delaunay.render()} fill=none stroke=blue></path>`
    + Object.entries(world).map(([n, e]) => `<circle cx=${e.x - location.x + 100} cy=${e.y - location.y + 100} r=4 fill=${req.headers.user.location.x == e.x && req.headers.user.location.y == e.y ? "red" : "white"}></circle>`)
    // + sites.map(({x, y}, i, a) => `<circle cx=${x} cy=${y} r=${ (Math.floor(twisted_euclidean_distance(world.district42)({x,y}, world.spawn))) / 200 } fill=none stroke="blue"></circle>`)
    + paths.map(path => path.map(({x,y}, i, a) => a[i + 1] ? `<line x1="${x - location.x + 100}" y1="${y - location.y + 100}" x2="${a[i + 1].x - location.x + 100}" y2="${a[i + 1].y - location.y + 100}" stroke="brown" stroke-width="1px" />` : ''))
    + [ `<circle id=me cx=${100} cy=${100} r=2 fill=blue ? "red" : "white"}></circle>` ]
    // + paths.map((e, i, a) => `<polygon points="${voronoi.cellPolygon(delaunay.find(e.x, e.y))}" fill="purple" fill-opacity=0.5></polygon>`)
    // + sites.map(([x, y], i, a) => `<text x=${x} y=${y} class=small>${Math.floor(twisted_euclidean_distance(world.district42)({x,y}, world.spawn)) - 7000}</text>`)
    // + sites.map(([x, y], i, a) => `<text x=${x} y=${y - 6} class=small>${Math.floor(twisted_euclidean_distance2(world.district42)({x,y}, world.spawn))}</text>`)
    // + [sites.splice(0).filter(([x,y]) => world.spawn.x != x && world.spawn.y != y).sort(twisted_euclidean_distance(world.spawn))[0]].map(([x, y], i, a) => `<text x=${x} y=${y} class=small>${Math.floor(twisted_euclidean_distance(world.spawn)({x,y}, world.spawn))}</text>`)
    ).join()
  )
})

app.get('/chunk/:id', (req: express$Request, res, next) => {
  let {location} = req.headers.user
  let {id} = req.params

  // console.log(`data/${req.params.id}`)
  req.headers.user.chunks.push(id)
  res.end(JSON.stringify(getChunk(req.params.id)))
})

app.get('/chunk', (req: express$Request, res, next) => {
  let {x, y} = req.headers.user.location

  res.end(JSON.stringify({
    x : Math.floor( x / 32 ),
    y : Math.floor( y / 32 )
  }))
  // let location = req.headers.user.location
  // let map = []
  //
  // for (let x = 0; x < 200; x++) {
  //   for (let y = 0; y < 200 ; y++) {
  //     const i = (x + y * 200) * 4;
  //     const p = {x: x + Math.floor(location.x) - 100, y: y + Math.floor(location.y) - 100}
  //
  //     let w = getWorld(p)
  //     map[i] = w[0]
  //     map[i + 1] = w[1]
  //     map[i + 2] = w[2]
  //     map[i + 3] = w[3]
  //   }
  // }

  // res.end( JSON.stringify(map) )
})

import { parse } from 'url'
import qs from 'querystring'

app.get('/data', (req: express$Request, res, next) => {
  let _ = 0
  let map = []

  let {x, y} = req.headers.user.location
  for (var j = 0; j < 200; j++) {
    for (var i = 0; i < 200; i++) {
      let [r, g, b, a] = getWorld({x: i, y: j})
      if (i == x && y == j) {
        map[_] = 255
        map[_ + 1] = 0
        map[_ + 2] = 0

      }
      else {

        map[_] = r
        map[_ + 1] = g
        map[_ + 2] = b
      }
      map[_ + 3] = a
      _ += 4
    }
  }

  res.end(JSON.stringify(map))
})

app.get('/move', (req: express$Request, res, next) => {
  let { user } = req.headers
  if (user.state == 'move')
    res.status(400).end()

  user.state = 'move'
  let d = qs.parse(parse(req.url).query)

  d.x = user.location.x + (Number(d.x) - 100)
  d.y = user.location.y + (Number(d.y) - 100)

  let _x = (d.x - user.location.x) / 2
  let _y = (d.y - user.location.y) / 2

  let f = (user) => {
    user.location.x += _x
    user.location.y += _y

    if (user.location.x == d.x && user.location.y == d.y) {
      user.update.splice( user.update.indexOf(f), 1 )
      user.state = 'idle'
    }

    user.ws.send(JSON.stringify({ cmd: 'me', payload: user_to_string(user) }))

    for (var x = -2; x <= 2; x++) {
      for (var y = -2; y <= 2; y++) {
        let _x = Math.floor(user.location.x / 32) + x
        let _y = (Math.floor(user.location.y / 32) + y)
        let i = _x + _y * 32

        if ( user.chunks.find(e => i == e) == undefined && _x >= 0 && _y >= 0 && _x < 32 && _y < 32) {
          user.ws.send(JSON.stringify({ cmd: 'chunk', payload: {
            x: _x,
            y: _y,
            data: getChunk(i)
          } }))
          user.chunks.push(i)
        }

      }
    }
  }

  user.update.push(f)
  res.end()
})

app.listen(4242, 'localhost', () => {
  console.log(`Listening on port 4242 @ ${new Date().toTimeString()}`)
  console.log(`seed ${seed}`)

  let lock = false
  setInterval(function () {
    if (lock == true)
      return console.error('late lock !!')

    lock = true

    time({
      seconds: [ update_user ],
      minutes: [ update_world ],
      hours:[],
      days: [ /* update_world_daily */ ],
      weeks: [],

    })

    lock = false
  }, scale * 1000)

  setInterval(function ping() {
    users.forEach( function each(user) {
      if (!user.ws)
        return

      if (user.ws && user.connected === false)
        return user.ws.terminate();

      user.connected = false;
      user.ws.ping(function(){});
    });
  }, 20000);
});
