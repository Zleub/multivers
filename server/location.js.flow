/* @flow */

import {Delaunay} from "d3-delaunay";

import { current_time, time_convert } from './time'
import { items } from './item'
import {
  type Point,
  width,
  height,
  rand,
  world_to_chunk,
  euclidean_distance,
  twisted_euclidean_distance,
} from './util'
import { sites } from './site'
import { City } from './city'

export let delaunay = Delaunay.from( sites.map(({x, y}) => ([x, y])) )
export let voronoi = delaunay.voronoi([0, 0, width, height])

let t = []
export let poly: Array<Array<[number, number]>> = [...voronoi.cellPolygons()].filter((e, i) => {
  let _ = !e.find( ([x,y]) => x == 0 || x == width || y == 0 || y == height )
  if (!_)
    t.push({x: sites[i].x, y: sites[i].y, i})
  return _
})

let _sites = sites.slice(0).filter( ({x,y}) =>
  t.find( ({x: _x, y: _y}) => _x == x && _y == y ) == undefined
)

export let world : {
  [string]: City
} = {}

for (var i = 0; i < 5; i++) {
  let {x, y} = _sites[rand(_sites.length)]

  let _ = new City({
    x, y,
    chunk: world_to_chunk({x, y}),
    size: 0,
    population: 0,

    type: 'city',
    id: 'City' + String(i)
  })
  world[_.id] = _
}

function Path(from: Point, to: Point) {
  let twisted_distance = twisted_euclidean_distance(to)
  let path = [
    { x: from.x, y: from.y, d: twisted_distance(from, from) }
  ]

  while (from.x != to.x || from.y != to.y) {
      let woot = [...delaunay.neighbors(delaunay.find(from.x, from.y))]
      .map(i =>
        ({x: sites[i].x, y: sites[i].y, d: twisted_distance({x: sites[i].x, y: sites[i].y}, from)})
      )
      .filter( ({x,y}) => t.find( ({x: _x, y: _y}) => _x == x && _y == y ) == undefined )
      .filter( ({x,y}) => path.find( ({x: _x, y: _y}) => _x == x && _y == y ) == undefined )
      .sort( (a,b) => a.d - b.d )

      if (woot.length == 0) {
        console.log('what ?')
        break
      }
      path.push(woot[0])
      from = { x: woot[0].x, y: woot[0].y }
  }

  return path
}

export let paths = (Object.values(world): any).filter((e: City) => e !== world.spawn).map((e: City) => Path(world.spawn, e))
