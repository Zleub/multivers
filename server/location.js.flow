/* @flow */

import { current_time, time_convert } from './time'
import { items } from './item'
// import { users } from './user'
import { euclidean_distance, twisted_euclidean_distance, rand } from './util'
import { sites } from './site'
import { width, height } from './world'

import {Delaunay} from "d3-delaunay";

export let delaunay = Delaunay.from( sites.map(({x, y}) => ([x, y])) )
export let voronoi = delaunay.voronoi([0, 0, width, height])

let t = []
export let poly = [...voronoi.cellPolygons()].filter((e, i) => {
  let _ = !e.find( ([x,y]) => x == 0 || x == width || y == 0 || y == height )
  if (!_)
    t.push({x: sites[i].x, y: sites[i].y, i})
  return _
})

let _sites = sites.slice(0).filter( ({x,y}) =>
  t.find( ({x: _x, y: _y}) => _x == x && _y == y ) == undefined
)

const predefs = [
  {
    id: 'spawn',
    type: 'spawn',
    name: 'Spawn City',
		population: 1000,

    ressources: {
      wood: 1000000
    }
  },
  {
    id: 'district42'
  }
]

export let world = {}

for (var i = 0; i < 5; i++) {
  let {x, y} = _sites[rand(_sites.length)]

  let _ = {
    x, y,
    type: 'city'
  }

  let p = predefs.pop()
  if (p)
    world[p.id] = Object.assign(_, p)
  else {
    _.name = 'City' + String(i)
    world[_.name] = _
  }
}

function Path(from, to) {
  let twisted_distance = twisted_euclidean_distance(to)
  let path = [
    { x: from.x, y: from.y, d: twisted_distance(from, from) }
  ]

  while (from.x != to.x || from.y != to.y) {
      let woot = [...delaunay.neighbors(delaunay.find(from.x, from.y))]
      .map(i =>
        ({x: sites[i].x, y: sites[i].y, d: twisted_distance({x: sites[i].x, y: sites[i].y}, from)})
      )
      .filter( ({x,y}) => t.find( ({x: _x, y: _y}) => _x == x && _y == y ) == undefined )
      .sort( (a,b) => a.d - b.d )

      if (woot.length == 0) {
        console.log('what ?')
        break
      }
      path.push(woot[0])
      from = woot[0]
  }

  return path
}

export let paths = Object.values(world).filter(e => e !== world.spawn).map(e => Path(world.spawn, e))
