/* @flow */

import crypto from 'crypto'
import fs, { writeFileSync } from 'fs'

import R from 'ramda'

import express from 'express'
import { app, ws_app } from './express'

import { users, user_to_string } from './user'
// import { states } from './state'

if (process.argv.find(e => e == '--log' || e == '-l'))
  writeFileSync("multivers.log", "")

let is_user = (req: express$Request, res, next) => {
  if (users.find(e => e.ip == req.ip)) {
    req.headers.user = users.find(e => e.ip == req.ip)
    next()
  }
}

app.use(is_user)

let debug = (req: express$Request, res, next) => {
  console.log(`${req.protocol}://${req.hostname}${req.url}: ${req.headers.user ? req.headers.user.name : "no user defined"}`)
  next()
}

app.use(debug)
app.use('/', express.static('client'))

let items = {
  cheval : {
    abs_value: 300,
    tier: 1
  },
  attelage: {
    abs_value: 1500,
    tier: 1
  }
}

let world = {
  spawn: {
    type: 'city',
    name: 'Spawn City',
    states: {
      explore: {
        'gold': [ [1, 100], [1, 9], 'You managed to beg for a few pieces' ],
        // 'people': [ [1, 1000], [1, 1], 'Someone liked your caravan idea and decided to join you !' ]
      },
    },
    shop: {}
  }
}

require('./get').default(app)

app.get('/explore', (req: express$Request, res, next) => {
  let {user} = req.headers

  if (user.state == 'explore') {
    user.state = 'idle'
    user.ws.send(JSON.stringify({ cmd: 'me' }))
    return res.end()
  }

  user.state = 'explore'
  user.ws.send(JSON.stringify({
    cmd: 'me'
  }))
  res.end()
})

app.get('/states', (req: express$Request, res, next) => {
  res.end( JSON.stringify(R.keys(world[req.headers.user.location].states)) )
})

app.listen(4242, 'localhost', () => {
  console.log(`Listening on port 4242 @ ${new Date().toTimeString()}`)

  setInterval(function () {
    users.forEach(u => {
      if (u.state != 'idle') {
        let location = world[u.location]
        let a = Math.round(Math.random() * (Object.keys(location.states).length - 1))
        let [ name, [ [ chance, total ], [min, max], text ]] = Object.entries(location.states[u.state])[a]
        let _ = Math.floor(Math.random() * total) + 1
        let res = _ <= chance
        if (res) {
          let _ = Math.floor(Math.random() * max) + min
          u[name] += _
          u.events.push(text + ` [+ ${_}] { ${new Date().toTimeString()} } `)
          u.ws.send(JSON.stringify({ cmd: 'me' }))
        }
      }
    })
  }, 1000)

  setInterval(function ping() {
    users.forEach( function each(user) {
      if (!user.ws)
        return

      if (user.ws && user.connected === false)
        return user.ws.terminate();

      user.connected = false;
      user.ws.ping(function(){});
    });
  }, 30000);
});
