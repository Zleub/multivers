/* @flow */

import OpenSimplexNoise from 'open-simplex-noise'
import Chance from 'chance'

export type Point = {|
  x: number,
  y: number
|};

export const seed = 1542936980729 // 1542841546813 // 42
export const chance = new Chance(seed)
export const rand = (x: number): number => chance.integer({min: 0, max: x})

export const openSimplex = new OpenSimplexNoise(seed)
export const openSimplexTree = new OpenSimplexNoise(seed)
export const openSimplexRiver = new OpenSimplexNoise(seed)
export const scale = 200

const noise_scale = ({x, y}) => [x / scale, y / scale]
export const noise2D = (p: Point) => openSimplex.noise2D(...noise_scale(p))

export const euclidean_distance = (a: Point, b: Point)  =>
	Math.sqrt( Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) )

export const twisted_euclidean_distance = (p: Point) => (a: Point, b: Point) =>
  Math.sqrt(
		Math.pow(a.x - b.x + a.x - p.x + b.x - p.x, 2)
		+ Math.pow(a.y - b.y + a.y - p.y + b.y - p.y, 2)
	)

export const sort_distance = (p: Point) =>
	(a: Point, b: Point) => euclidean_distance(p, a) - euclidean_distance(p, b)
export const twisted_sort_distance = (p: Point) =>
	(a: Point, b: Point) => twisted_euclidean_distance(p)(a, b) - twisted_euclidean_distance(p)(a, b)
