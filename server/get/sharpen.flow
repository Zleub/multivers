/* @flow */

import { time, end, flattenDeep } from '../utils'
import { world } from '../World'
import { computeFOV } from '../FOV'

export default function (req : express$Request, res: express$Response) {
  time.start('sharpen');
  const player = world.players.filter(e => e.ip == req.connection.remoteAddress)[0]
  let fov = computeFOV(player.position)

  // let _res = world.map.shallow_map
  // let sharpen = [
  //   [ 0, -1,  0],
  //   [-1,  5, -1],
  //   [ 0, -1,  0]
  // ]
  let sharpen = [
    [ 0, 0,  0],
    [ -1, 10,  0],
    [ 0, 0,  0]
  ]

  let sm = world.map.shallow_map
  let _res = flattenDeep(sm).map(e => {
    let m = [
      [ sm[e.x - 1 < 0 ? 0 : e.x - 1][e.z - 1 < 0 ? 0 : e.z - 1].y, sm[e.x][e.z - 1 < 0 ? 0 : e.z - 1].y , sm[e.x + 1 >= world.map.limits.width ? world.map.limits.width : e.x + 1][e.z - 1 < 0 ? 0 : e.z - 1].y ],
      [     sm[e.x - 1 < 0 ? 0 : e.x - 1][e.z].y,                e.y , sm[e.x + 1 >= world.map.limits.width ? world.map.limits.width : e.x + 1][e.z].y     ],
      [ sm[e.x - 1 < 0 ? 0 : e.x - 1][e.z + 1 >= world.map.limits.width ? world.map.limits.width : e.z + 1].y, sm[e.x][e.z + 1 >= world.map.limits.width ? world.map.limits.width : e.z + 1].y , sm[e.x + 1 >= world.map.limits.width ? world.map.limits.width : e.x + 1][e.z + 1 >= world.map.limits.width ? world.map.limits.width : e.z + 1].y ],
    ]

    let r = m[0][0] * sharpen[0][0] +
      m[0][1] * sharpen[0][1] +
      m[0][2] * sharpen[0][2] +
      m[1][0] * sharpen[1][0] +
      m[1][1] * sharpen[1][1] +
      m[1][2] * sharpen[1][2] +
      m[2][0] * sharpen[2][0] +
      m[2][1] * sharpen[2][1] +
      m[2][2] * sharpen[2][2]

    return Object.assign({}, e, { y : Math.floor(r / 9) })
  })

  // _res.map(e => {
  //   let m = [
  //     [],
  //     [, e.y , world.map.map[e.x][] ],
  //     []
  //   ]
  // })

  // for (var x = 1; x < world.map.limits.width; x++) {
  //   for (var y = 1; y < world.map.limits.depth; y++) {
  //
  //     let value = Math.floor( (openSimplex.noise2D( x / 20, y / 20) + 0.8) * world.map.limits.height / 4)
  //     if (value < 0)
  //       value = 0
  //
  //     if (
  //       world.map.map[x - 1] &&
  //       world.map.map[x - 1][value] &&
  //       world.map.map[x] &&
  //       world.map.map[x][value] &&
  //       world.map.map[x + 1] &&
  //       world.map.map[x + 1][value] &&
  //       world.map.map[x - 1][value][y - 1] && world.map.map[x][value][y - 1] && world.map.map[x + 1][value][y - 1] &&
  //       world.map.map[x - 1][value][y]     && world.map.map[x][value][y]     && world.map.map[x + 1][value][y] &&
  //       world.map.map[x - 1][value][y + 1] && world.map.map[x][value][y + 1] && world.map.map[x + 1][value][y + 1])
  //     {
  //
  //       let _value =
  //       Math.floor( ((
  //           world.map.map[x - 1][value][y - 1].y * sharpen[0][0]
  //         + world.map.map[x - 1][value][y    ].y * sharpen[0][1]
  //         + world.map.map[x - 1][value][y + 1].y * sharpen[0][2]
  //         + world.map.map[x    ][value][y - 1].y * sharpen[1][0]
  //         + world.map.map[x    ][value][y    ].y * sharpen[1][1]
  //         + world.map.map[x    ][value][y + 1].y * sharpen[1][2]
  //         + world.map.map[x + 1][value][y - 1].y * sharpen[2][0]
  //         + world.map.map[x + 1][value][y    ].y * sharpen[2][1]
  //         + world.map.map[x + 1][value][y + 1].y * sharpen[2][2] ) / 9) )
  //
  //       // console.log(_value)
  //
  //       if (!_res[x])
  //         _res[x] = []
  //       if (!_res[x][value])
  //         _res[x][value] = []
  //
  //       _res[x][value][y] = {
  //         name: 'floor',
  //         x: x,
  //         y: _value,
  //         z: y
  //       }
  //     }
  //     else {
  //       if (!_res[x])
  //         _res[x] = []
  //       if (!_res[x][value])
  //         _res[x][value] = []
  //
  //       // console.log(x, value, y, world.map.map[x][value][y])
  //       // if (world.map.map[x][value][y])
  //         _res[x][value][y] = world.map.map[x][value][y]
  //     }
  //   }
  // }


  let _ = JSON.stringify({
    position: player.position,
    offset: player.offset,
    add: flattenDeep(_res).filter(e => {
      if (e)
        return e.name != 'air'
    }) /* .filter( (e, x, y) => {
        return player.fov.find( e => e[0] == x && e[1] == y) ? true : false
    }).map(e => ({
        name: e.name,
        x: e.x,
        y: e.y
      })) */
  })
  res.end(_, () => end('sharpen'))

  // res.end( JSON.stringify({
  //   world: world.map.filter( (e, i) => {
  //     const x = i % world.limits.width
  //     const y = Math.floor(i / world.limits.width)
  //     return user.position[0] - fov <= x && x <= user.position[0] + fov
  //       && user.position[1] - fov <= y && y <= user.position[1] + fov
  //      && (x - user.position[0]) ** 2 + (y - user.position[1]) ** 2 < fov ** 2
  //   } ).map(e => ({
  //     name: e.name,
  //     x: e.index % world.limits.width - user.position[0],
  //     y: Math.floor(e.index / world.limits.width) - user.position[1]
  //   })),
  //   limits: {
  //     fov
  //   }
  // }) )
}
