/* @flow */

import { time, end, flattenDeep } from '../utils'
import { world } from '../World'
import { computeFOV } from '../FOV'


/**
 * @api {get} /world World
 * @apiName World
 * @apiGroup All
 */
export default function (req : express$Request, res: express$Response) {
  // const user = JSON.parse(req.headers.user)
  time.start('world');
  const player = world.players.filter(e => e.ip == req.connection.remoteAddress)[0]

  // const fov = 16

  let fov = computeFOV(player.position)
  // console.log( fov.filter(e => !player.fov.find(_ => _[0] == e[0] && _[1] == e[1]) ) )

  player.fov = fov

  let _ = JSON.stringify({
    position: player.position,
    offset: player.offset,
    add: flattenDeep(world.map.map).filter(e => e.name != 'air') /* .filter( (e, x, y) => {
        return player.fov.find( e => e[0] == x && e[1] == y) ? true : false
    }).map(e => ({
        name: e.name,
        x: e.x,
        y: e.y
      })) */
  })
  res.end(_, () => end('world'))

  // res.end( JSON.stringify({
  //   world: world.map.filter( (e, i) => {
  //     const x = i % world.limits.width
  //     const y = Math.floor(i / world.limits.width)
  //     return user.position[0] - fov <= x && x <= user.position[0] + fov
  //       && user.position[1] - fov <= y && y <= user.position[1] + fov
  //      && (x - user.position[0]) ** 2 + (y - user.position[1]) ** 2 < fov ** 2
  //   } ).map(e => ({
  //     name: e.name,
  //     x: e.index % world.limits.width - user.position[0],
  //     y: Math.floor(e.index / world.limits.width) - user.position[1]
  //   })),
  //   limits: {
  //     fov
  //   }
  // }) )
}
