/* @flow */

import { type Point, rand, euclidean_distance, noise2D, openSimplexRiver, openSimplexTree } from './util'
import { Site, getNearestSite, sites } from './site'

export let [width, height] = [1024, 1024]
export let isTree = (p : Point) => {
  const value = (noise2D(p) + 1) * 128
  const valueTree = (openSimplexTree.noise2D( ...[p.x / 20, p.y / 20] ) + 1) * 128

  if (124 < value && value < 220 && 100 < valueTree)
      return p.x % (rand(5) + 2) == 0 && p.y % (rand(5) + 2) == 0
}

let rivers: Array<({|x: number, y: number|})> = []
let isRiver = p => rivers.find(_ => p.x == _.x && p.y == _.y)
let defRiver = (p : Point) => {
  const z = (noise2D({x: p.x, y: p.y}) + 1) * 128
  const i = (p.x + p.y * width) * 4

  if (p.x < 0 || p.x >= width || p.y < 0 || p.y >= height || z < 120)
    return

  rivers.push(p)

  // const value = p => (noise2D({x: p.x, y: p.y}) * openSimplexRiver.noise2D( ...[p.x / 20, p.y / 20] ) + 1) * 128
  const value = p => (noise2D({x: p.x, y: p.y}) * (openSimplexRiver.noise2D( ...[p.x / 5, p.y / 5] ) + 1) * 0.5 + 0.5) * 128

  let up = { x: p.x, y: p.y - 1, v: value({x: p.x, y: p.y - 1}) }
  let down = { x: p.x, y: p.y + 1, v: value({x: p.x, y: p.y + 1}) }
  let left = { x: p.x - 1, y: p.y, v: value({x: p.x - 1, y: p.y}) }
  let right = { x: p.x + 1, y: p.y, v: value({x: p.x + 1, y: p.y}) }

  let min = Math.min(...(
    [ up, down, left, right ].filter(({x, y}) =>
        rivers.find( ({x: _x, y: _y}) => x == _x && y == _y ) == undefined)
      .map(e => e.v)
    ))
  if (min === Infinity)
    return

  let d : Point = min == up.v ? ({x: p.x, y: p.y - 1}) :
    min == down.v ? ({x: p.x, y: p.y + 1}) :
    min == left.v ? ({x: p.x - 1, y: p.y}) :
    min == right.v ? ({x: p.x + 1, y: p.y}) :
    ({x: Infinity, y: Infinity})

  defRiver(d)
}

for (var i = 0; i < 42; i++) {
  defRiver({x: rand(width), y: rand(height)})
}

const colors = [
  { value: 215, r: 255, g: 255, b: 255 },
  { value: 212, r: 255, g:  69, b:  69 },
  { value: 127, r: 140, g: 255, b: 120 },
  { value: 120, r: 255, g: 255, b:   0 },
  { value:   0, r:   0, g:   0, b: 255 }
]

const world_stack = [
  { f: isRiver, r:   0, g:   0, b: 200},
  { f: isTree,  r:   0, g:  50, b:   0},
]

export const data = []
export const getWorld = (p: Point) => {
  let index = p.x + p.y * width
  let value
  if (!data[index]) {
    value = (noise2D(p) + 1) * 128
    data[index] = value
  }
  else
    value = data[index]


  const def = world_stack.find(({f}) => f(p))
  if (def) {
    return [ def.r, def.g, def.b, value ]
  }

  let c = colors.find(c => value > c.value)
  if (c)
    return [ c.r, c.g, c.b, value ]
  else
    return [ 0, 0, 0, 0 ]
}

export const getChunk = (c: number) => {
  let x = Math.floor( c % Math.floor(width / 32) )
  let y = Math.floor( c / Math.floor(width / 32) )

  let _ = 0
  let map = []
  for (var j = y * 32; j < y * 32 + 32; j++) {
    for (var i = x * 32; i < x * 32 + 32; i++) {
      let [r, g, b, a] = getWorld({x: i, y: j})
      map[_] = r
      map[_ + 1] = g
      map[_ + 2] = b
      map[_ + 3] = a
      _ += 4
    }
  }

  return map
}
